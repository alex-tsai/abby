require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"abby":[function(require,module,exports){
var Duration, Person, bg, button, email, errors, multiplier, newPerson, start, stop, submit, success, timer;

Parse.initialize("ibEM46yRkMLcwQxoUsDEq9pAZ4zZbh751TpGkCCK", "MmCehBrALXsyvE1XdJ5SIfD6HANzViFjNjrSZvvk");

Person = Parse.Object.extend('Person');

newPerson = new Person();


/*
Set up layers that ask for the email and triggers the start for the timer
 */

multiplier = 1;

if (Framer.Device.deviceType.indexOf('plus') >= 0 || Framer.Device.deviceType.indexOf('nexus-5') >= 0) {
  multiplier = 3;
} else if (Framer.Device.deviceType.indexOf('iphone') >= 0 || Framer.Device.deviceType.indexOf('ipad') >= 0 || Framer.Device.deviceType.indexOf('nexus-9') >= 0 || Framer.Device.deviceType.indexOf('applewatch') >= 0) {
  multiplier = 2;
}

bg = new BackgroundLayer({
  backgroundColor: "#f3f3f3"
});

email = new Layer({
  superLayer: bg,
  width: 302 * multiplier,
  midX: Screen.width / 2,
  height: 42 * multiplier,
  borderWidth: 1 * multiplier,
  borderRadius: 2 * multiplier,
  borderColor: "#d3d3d3",
  backgroundColor: "#FFFFFF",
  y: Screen.height * 0.4
});

email.html = "<textarea id='email' placeholder='Email Address' style='height:" + email.height + "px;width: " + email.width + "px;font-size:" + 16 * multiplier + "px;padding: " + 12 * multiplier + "px;'></textarea>";

button = new Layer({
  superLayer: bg,
  width: 150 * multiplier,
  x: email.x,
  height: 40 * multiplier,
  y: email.maxY + 20 * multiplier,
  backgroundColor: "#727272",
  borderRadius: 2 * multiplier
});

button.html = "<div style='text-align:center;height:" + button.height + "px;width: " + button.width + "px;font-size:" + 16 * multiplier + "px;padding-top: " + (16 * multiplier - 8) + "px;'>Start</div>";

button.on(Events.TouchStart, function() {
  return button.backgroundColor = "#333333";
});

button.on(Events.TouchEnd, function() {
  button.backgroundColor = "#727272";
  return submit();
});

email.querySelector('textarea').onkeydown = function(e) {
  if (e.keyCode === 13) {
    e.preventDefault();
    return submit();
  }
};

submit = function() {
  var re;
  re = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
  if (!re.test(email.querySelector('textarea').value)) {
    return email.borderColor = "#FFAABB";
  } else {
    newPerson.set('email', email.querySelector('textarea').value);
    bg.animate({
      properties: {
        opacity: 0
      },
      time: 0.5
    });
    return Utils.delay(0.5, function() {
      bg.destroy();
      return start();
    });
  }
};

email.querySelector('textarea').onfocus = function() {
  return email.borderColor = "#727272";
};

email.querySelector('textarea').onblur = function() {
  return email.borderColor = "#d3d3d3";
};


/*
	Classes and functions for collecting quantitative usability data
 */

Duration = (function() {
  function Duration() {}

  Duration.prototype.start = new Date().getTime();

  Duration.prototype.end = function() {
    var time;
    time = new Date(new Date().getTime() - this.start);
    return time.getMinutes() + ":" + time.getSeconds() + "." + Math.round(time.getMilliseconds() / 100);
  };

  return Duration;

})();

timer = new Duration();

start = function() {
  return timer.start = new Date().getTime();
};

stop = function() {
  return timer.end();
};

errors = [];

exports.logError = function(error) {
  return errors.push(error);
};

success = false;

exports.end = function() {
  newPerson.set('success', success);
  newPerson.set('time', stop());
  newPerson.set('errors', errors);
  return newPerson.save({
    success: function(person) {
      return print("Thank You!");
    }
  });
};

exports.success = function() {
  success = true;
  return exports.end();
};

exports.init = function() {
  return bg.bringToFront();
};



},{}],"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,
